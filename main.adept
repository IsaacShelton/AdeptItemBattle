
/*
    Sailboat Game Template
    Created by Isaac Shelton, Licensed under the Unlicense

    -------------------------------------------------
    This is free and unencumbered software released into the public domain.

    Anyone is free to copy, modify, publish, use, compile, sell, or
    distribute this software, either in source code form or as a compiled
    binary, for any purpose, commercial or non-commercial, and by any
    means.

    In jurisdictions that recognize copyright laws, the author or authors
    of this software dedicate any and all copyright interest in the
    software to the public domain. We make this dedication for the benefit
    of the public at large and to the detriment of our heirs and
    successors. We intend this dedication to be an overt act of
    relinquishment in perpetuity of all present and future rights to this
    software under copyright law.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
    OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
    ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
    OTHER DEALINGS IN THE SOFTWARE.

    For more information, please refer to <http://unlicense.org/>
    -------------------------------------------------

    Technologies:
    - Adept Language and Standard Library
    - Captain 2D Window & Graphics Library

    Optional Technologies:
    - 2.5/JSON.adept
    - Box2D          :  adept install box2d
    - Base64         :  adept install base64
*/

pragma compiler_version '2.6'

#define SAILBOAT_GAME_TITLE            "ItemBattle"
#define SAILBOAT_FULLSCREEN            true
#define SAILBOAT_USE_MOUSE_VIEW_COORDS true

import basics
import captain
import random
import Optional

import "GameData.adept"
import "Textures.adept"

func main {
    captOnSetup(func &onSetup)
    captOnStep(func &onStep)
    captOnKey(func &onKey)
    captOnClick(func &onClick, #get SAILBOAT_USE_MOUSE_VIEW_COORDS)
    captOnDraw(func &onDraw)
    captOnExit(func &onExit)
    captStart(#get SAILBOAT_GAME_TITLE, #get SAILBOAT_FULLSCREEN)
}

func onSetup {
    // Called before the first frame, should be used to load assets and prepare for application loop

    randomize()
    textures.load()
    gamedata.load()
}

func onExit {
    // Called when the application is preparing to close, should be used to free remaining assets

    textures.unload()
}

func onStep {
    // Called once per frame, should be used to update gamedata

    switch gamedata.stage {
    case Stage::PICK
        if gamedata.items.length == 5{
            gamedata.stage = Stage::BATTLE
            gamedata.prepareAnimation()
        }
    case Stage::BATTLE
        if isAnimationFinished() {
            gamedata.items.clear()
            gamedata.refreshShop()
            gamedata.stage = Stage::PICK
        }
    }
}

func onKey(key, _scancode, action, _mods int) {
    // Called once per keyboard event    

    if action != GLFW_PRESS, return

    repeat static 5, maybeBuy(key, GLFW_KEY_1 + idx, idx)

    if key == GLFW_KEY_SPACE, gamedata.progress()
}

func maybeBuy(key, target_key int, spot usize) {
    if key == target_key {
        item *Item = gamedata.shop.getPointer(spot)
        if item.kind != ItemKind::EMPTY {
            gamedata.items.add(*item)
            *item = Item(ItemKind::EMPTY, item.bonus)
        }
    }
}

func onClick(_mouse_x, _mouse_y float, _button int) {
    // Called once per mouse click
    // 'mouse_x' and 'mouse_y' coords are in view coordinates by default (as set by captOnClick)
    // Button 1 == left
    // Button 2 == right
    // Button 3 == middle
    // etc.
}

func onDraw {
    // Called once per frame, should be used to render everything

    captDrawTexture(textures.bg, 0.0f, 0.0f, captViewWidth(), captViewHeight())
    gamedata.drawScore()

    switch gamedata.stage {
        case Stage::PICK
            drawItemList(&gamedata.items)
            drawShop()
        case Stage::BATTLE
            our_score <int> Optional
            opponent_score <int> Optional

            if gamedata.items.length && gamedata.opponent.length {
                our_score = some(gamedata.items.calculateScore(&gamedata.opponent))
                opponent_score = some(gamedata.opponent.calculateScore(&gamedata.items))
            }

            captDrawText("You", 32.0, captViewHeight() / 2.0 + 64.0)
            captDrawText("Opponent", 32.0, captViewHeight() / 2.0 - 64.0)
            drawItemList(&gamedata.items, some(captViewHeight() / 2.0 + 64.0), our_score)
            drawItemList(&gamedata.opponent, some(captViewHeight() / 2.0 - 64.0), opponent_score)
            captDrawText("Press Space", 32.0, captViewHeight() / 2.0 + 192.0)
    }
}

func isAnimationFinished() bool {
    return gamedata.finished
}

func drawItemList(
    items *<Item> List,
    y <float> Optional = none() ~> <float> Optional,
    score <int> Optional = none() ~> <int> Optional
){
    center_x float = captViewWidth() / 2.0f
    center_y float = y.has ? y.value : captViewHeight() / 2.0f
    size float = 48.0f
    count float = items.length as float
    padding float = 16.0f
    total_width float = count * size + padding * max(0.0f, count - 1.0f)

    x float = center_x - total_width / 2.0

    if score.has {
        captDrawText(sprintf("%d", score.value), x - 64.0, center_y + 4.0)
    }

    each Item in static *items {
        captDrawTexture(it.getTexture(), x, center_y - size / 2.0f, size, size)
        captDrawText(sprintf("+%d", it.bonus), x - 8.0, center_y - 8.0 - size / 2.0)
        x += padding + size
    }
}

func drawShop {
    items *<Item> List = &gamedata.shop
    center_x float = captViewWidth() / 2.0f
    center_y float = captViewHeight() - 128.0
    size float = 48.0f
    count float = items.length as float
    padding float = 16.0f
    total_width float = count * size + padding * max(0.0f, count - 1.0f)

    x float = center_x - total_width / 2.0f
    tooltip String

    each Item in static *items {
        y float = center_y - size / 2.0f
        captDrawTexture(it.getTexture(), x, y, size, size)
        captDrawText(sprintf("+%d", it.bonus), x - 8.0, y - 8.0)
        captDrawText(toString(idx + 1), x + 20.0, y + size + 4.0)

        captMouseViewPosition(undef mouse_x float, undef mouse_y float)

        if distance(mouse_x, mouse_y, x + size / 2.0f, center_y) < size / 2.0f {
            tooltip = it.getTooltip()
        }

        x += size + padding
    }
    
    captDrawText(tooltip, captViewWidth() / 2.0f - 192.0f, captViewHeight() / 2.0 - 128.0)
}
